# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawTaskmasterClient, RawTaskmasterClient
from .types.health_response import HealthResponse
from .types.transcription_response import TranscriptionResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TaskmasterClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTaskmasterClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTaskmasterClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTaskmasterClient
        """
        return self._raw_client

    def get_health(self, *, request_options: typing.Optional[RequestOptions] = None) -> HealthResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthResponse

        Examples
        --------
        from taskmaster import TaskmasterTaskmaster

        client = TaskmasterTaskmaster()
        client.taskmaster.get_health()
        """
        _response = self._raw_client.get_health(request_options=request_options)
        return _response.data

    def create_transcription(
        self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> TranscriptionResponse:
        """
        Transcribe uploaded audio file

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TranscriptionResponse
        """
        _response = self._raw_client.create_transcription(file=file, request_options=request_options)
        return _response.data


class AsyncTaskmasterClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTaskmasterClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTaskmasterClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTaskmasterClient
        """
        return self._raw_client

    async def get_health(self, *, request_options: typing.Optional[RequestOptions] = None) -> HealthResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthResponse

        Examples
        --------
        import asyncio

        from taskmaster import AsyncTaskmasterTaskmaster

        client = AsyncTaskmasterTaskmaster()


        async def main() -> None:
            await client.taskmaster.get_health()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_health(request_options=request_options)
        return _response.data

    async def create_transcription(
        self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> TranscriptionResponse:
        """
        Transcribe uploaded audio file

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TranscriptionResponse
        """
        _response = await self._raw_client.create_transcription(file=file, request_options=request_options)
        return _response.data
