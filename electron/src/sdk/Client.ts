/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { System } from "./api/resources/system/client/Client.js";
import { Tasks } from "./api/resources/tasks/client/Client.js";
import { Transcription } from "./api/resources/transcription/client/Client.js";

export declare namespace TaskmasterTaskmasterClient {
    export interface Options {
        environment?: core.Supplier<environments.TaskmasterTaskmasterEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class TaskmasterTaskmasterClient {
    protected readonly _options: TaskmasterTaskmasterClient.Options;
    protected _system: System | undefined;
    protected _tasks: Tasks | undefined;
    protected _transcription: Transcription | undefined;

    constructor(_options: TaskmasterTaskmasterClient.Options = {}) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get system(): System {
        return (this._system ??= new System(this._options));
    }

    public get tasks(): Tasks {
        return (this._tasks ??= new Tasks(this._options));
    }

    public get transcription(): Transcription {
        return (this._transcription ??= new Transcription(this._options));
    }
}
