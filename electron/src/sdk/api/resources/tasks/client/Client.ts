/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as TaskmasterTaskmaster from "../../../index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Tasks {
    export interface Options {
        environment?: core.Supplier<environments.TaskmasterTaskmasterEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Tasks {
    protected readonly _options: Tasks.Options;

    constructor(_options: Tasks.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {TaskmasterTaskmaster.CreateTaskRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.createTask({
     *         title: "title",
     *         description: "description",
     *         status: "TODO",
     *         priority: 1,
     *         duration_seconds: 1,
     *         deadline: undefined,
     *         prerequisite_tasks: undefined
     *     })
     */
    public createTask(
        request: TaskmasterTaskmaster.CreateTaskRequest,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<TaskmasterTaskmaster.Task> {
        return core.HttpResponsePromise.fromPromise(this.__createTask(request, requestOptions));
    }

    private async __createTask(
        request: TaskmasterTaskmaster.CreateTaskRequest,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<TaskmasterTaskmaster.Task>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TaskmasterTaskmasterEnvironment.Local,
                "/api/create-task",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TaskmasterTaskmaster.Task, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TaskmasterTaskmasterError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TaskmasterTaskmasterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TaskmasterTaskmasterTimeoutError(
                    "Timeout exceeded when calling POST /api/create-task.",
                );
            case "unknown":
                throw new errors.TaskmasterTaskmasterError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {TaskmasterTaskmaster.UpdateTaskRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.updateTask({
     *         title: "title",
     *         description: undefined,
     *         status: undefined,
     *         priority: undefined,
     *         duration_seconds: undefined,
     *         deadline: undefined,
     *         prerequisite_tasks: undefined
     *     })
     */
    public updateTask(
        request: TaskmasterTaskmaster.UpdateTaskRequest,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<TaskmasterTaskmaster.Task> {
        return core.HttpResponsePromise.fromPromise(this.__updateTask(request, requestOptions));
    }

    private async __updateTask(
        request: TaskmasterTaskmaster.UpdateTaskRequest,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<TaskmasterTaskmaster.Task>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TaskmasterTaskmasterEnvironment.Local,
                "/api/update-task",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TaskmasterTaskmaster.Task, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TaskmasterTaskmasterError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TaskmasterTaskmasterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TaskmasterTaskmasterTimeoutError(
                    "Timeout exceeded when calling POST /api/update-task.",
                );
            case "unknown":
                throw new errors.TaskmasterTaskmasterError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.deleteTask()
     */
    public deleteTask(requestOptions?: Tasks.RequestOptions): core.HttpResponsePromise<TaskmasterTaskmaster.Task> {
        return core.HttpResponsePromise.fromPromise(this.__deleteTask(requestOptions));
    }

    private async __deleteTask(
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<TaskmasterTaskmaster.Task>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TaskmasterTaskmasterEnvironment.Local,
                "/api/delete-task",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TaskmasterTaskmaster.Task, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TaskmasterTaskmasterError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TaskmasterTaskmasterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TaskmasterTaskmasterTimeoutError(
                    "Timeout exceeded when calling POST /api/delete-task.",
                );
            case "unknown":
                throw new errors.TaskmasterTaskmasterError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.getTasks()
     */
    public getTasks(requestOptions?: Tasks.RequestOptions): core.HttpResponsePromise<TaskmasterTaskmaster.Task[]> {
        return core.HttpResponsePromise.fromPromise(this.__getTasks(requestOptions));
    }

    private async __getTasks(
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<TaskmasterTaskmaster.Task[]>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TaskmasterTaskmasterEnvironment.Local,
                "/api/get-tasks",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as TaskmasterTaskmaster.Task[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TaskmasterTaskmasterError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TaskmasterTaskmasterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TaskmasterTaskmasterTimeoutError("Timeout exceeded when calling GET /api/get-tasks.");
            case "unknown":
                throw new errors.TaskmasterTaskmasterError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {TaskmasterTaskmaster.GenerateTasksRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tasks.generateTasks({
     *         transcript: "transcript",
     *         existing_tasks: undefined
     *     })
     */
    public generateTasks(
        request: TaskmasterTaskmaster.GenerateTasksRequest,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<TaskmasterTaskmaster.GenerateTasksResponse> {
        return core.HttpResponsePromise.fromPromise(this.__generateTasks(request, requestOptions));
    }

    private async __generateTasks(
        request: TaskmasterTaskmaster.GenerateTasksRequest,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<TaskmasterTaskmaster.GenerateTasksResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TaskmasterTaskmasterEnvironment.Local,
                "/api/generate-tasks",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as TaskmasterTaskmaster.GenerateTasksResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.TaskmasterTaskmasterError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TaskmasterTaskmasterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TaskmasterTaskmasterTimeoutError(
                    "Timeout exceeded when calling POST /api/generate-tasks.",
                );
            case "unknown":
                throw new errors.TaskmasterTaskmasterError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
