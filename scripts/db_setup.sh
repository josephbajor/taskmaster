#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
REPO_ROOT="$(dirname "$SCRIPT_DIR")"
BACKEND_DIR="$REPO_ROOT/backend"
ENV_FILE="$BACKEND_DIR/.env.db"

DB_USER="taskmaster"
DB_PASSWORD="taskmaster"
DB_NAME="taskmaster"
DB_HOST="localhost"
DB_PORT="5432"

# Ensure brew is present for macOS path; otherwise skip install section
if command -v brew >/dev/null 2>&1; then
	if ! brew list --versions postgresql@16 >/dev/null 2>&1; then
		echo "[db] Installing postgresql@16 via Homebrew"
		brew install postgresql@16
	fi
	echo "[db] Starting postgresql@16 via Homebrew"
	brew services start postgresql@16 || true
	# Make sure psql is on PATH for this shell
	export PATH="/opt/homebrew/opt/postgresql@16/bin:$PATH"
else
	echo "[db] Homebrew not found. Skipping install/start. Ensure Postgres is running and psql is on PATH." >&2
fi

# Create role and database (idempotent)
ROLE_EXISTS=$(psql -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname = '$DB_USER'" || true)
if [[ "${ROLE_EXISTS}" != "1" ]]; then
    echo "[db] Creating role '$DB_USER'"
    psql -d postgres -c "CREATE ROLE $DB_USER LOGIN PASSWORD '$DB_PASSWORD';"
fi
psql -d postgres -c "ALTER ROLE $DB_USER CREATEDB;" || true
createdb -O "$DB_USER" "$DB_NAME" 2>/dev/null || true
psql -d postgres -c "ALTER DATABASE $DB_NAME OWNER TO $DB_USER;" || true

ASYNC_URL="postgresql+asyncpg://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME"
SYNC_URL="postgresql+psycopg://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME"

# Write env file for backend
cat > "$ENV_FILE" <<EOF
# Generated by scripts/db_setup.sh
DATABASE_URL="$ASYNC_URL"
ALEMBIC_DATABASE_URL="$SYNC_URL"
EOF

echo "[db] Wrote $ENV_FILE"

# Apply migrations
pushd "$BACKEND_DIR" >/dev/null
if ! command -v uv >/dev/null 2>&1; then
	echo "Error: 'uv' is required. See https://astral.sh/uv" >&2
	exit 1
fi
uv run alembic upgrade head
popd >/dev/null

echo "[db] Database initialized and migrations applied."
